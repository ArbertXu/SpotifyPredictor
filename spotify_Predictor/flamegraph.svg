<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="90200"><g><title>core::ptr::drop_in_place&lt;[spotify_Predictor::data::Track]&gt; (32 samples, 0.04%)</title><rect x="0.0100%" y="261" width="0.0355%" height="15" fill="rgb(227,0,7)" fg:x="9" fg:w="32"/><text x="0.2600%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;spotify_Predictor::data::Track&gt; (29 samples, 0.03%)</title><rect x="0.0133%" y="245" width="0.0322%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="29"/><text x="0.2633%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2,302 samples, 2.55%)</title><rect x="0.0588%" y="229" width="2.5521%" height="15" fill="rgb(221,193,54)" fg:x="53" fg:w="2302"/><text x="0.3088%" y="239.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,199 samples, 1.33%)</title><rect x="2.6109%" y="229" width="1.3293%" height="15" fill="rgb(248,212,6)" fg:x="2355" fg:w="1199"/><text x="2.8609%" y="239.50"></text></g><g><title>alloc::vec::set_len_on_drop::SetLenOnDrop::increment_len (24 samples, 0.03%)</title><rect x="3.9412%" y="229" width="0.0266%" height="15" fill="rgb(208,68,35)" fg:x="3555" fg:w="24"/><text x="4.1912%" y="239.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (536 samples, 0.59%)</title><rect x="3.9678%" y="229" width="0.5942%" height="15" fill="rgb(232,128,0)" fg:x="3579" fg:w="536"/><text x="4.2178%" y="239.50"></text></g><g><title>core::ptr::write (1,696 samples, 1.88%)</title><rect x="4.5621%" y="229" width="1.8803%" height="15" fill="rgb(207,160,47)" fg:x="4115" fg:w="1696"/><text x="4.8121%" y="239.50">c..</text></g><g><title>spotify_Predictor::decision_tree::find_split::_{{closure}} (34 samples, 0.04%)</title><rect x="6.4501%" y="229" width="0.0377%" height="15" fill="rgb(228,23,34)" fg:x="5818" fg:w="34"/><text x="6.7001%" y="239.50"></text></g><g><title>spotify_Predictor::decision_tree::gini_impurty (16,170 samples, 17.93%)</title><rect x="6.4878%" y="229" width="17.9268%" height="15" fill="rgb(218,30,26)" fg:x="5852" fg:w="16170"/><text x="6.7378%" y="239.50">spotify_Predictor::decision_..</text></g><g><title>medium_malloc_should_clear (16 samples, 0.02%)</title><rect x="24.4224%" y="213" width="0.0177%" height="15" fill="rgb(220,122,19)" fg:x="22029" fg:w="16"/><text x="24.6724%" y="223.50"></text></g><g><title>medium_malloc_from_free_list (13 samples, 0.01%)</title><rect x="24.4257%" y="197" width="0.0144%" height="15" fill="rgb(250,228,42)" fg:x="22032" fg:w="13"/><text x="24.6757%" y="207.50"></text></g><g><title>alloc::alloc::alloc (22,001 samples, 24.39%)</title><rect x="0.0588%" y="245" width="24.3914%" height="15" fill="rgb(240,193,28)" fg:x="53" fg:w="22001"/><text x="0.3088%" y="255.50">alloc::alloc::alloc</text></g><g><title>szone_malloc_should_clear (32 samples, 0.04%)</title><rect x="24.4146%" y="229" width="0.0355%" height="15" fill="rgb(216,20,37)" fg:x="22022" fg:w="32"/><text x="24.6646%" y="239.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (896 samples, 0.99%)</title><rect x="24.4834%" y="197" width="0.9933%" height="15" fill="rgb(206,188,39)" fg:x="22084" fg:w="896"/><text x="24.7334%" y="207.50"></text></g><g><title>madvise (896 samples, 0.99%)</title><rect x="24.4834%" y="181" width="0.9933%" height="15" fill="rgb(217,207,13)" fg:x="22084" fg:w="896"/><text x="24.7334%" y="191.50"></text></g><g><title>free_medium (911 samples, 1.01%)</title><rect x="24.4678%" y="229" width="1.0100%" height="15" fill="rgb(231,73,38)" fg:x="22070" fg:w="911"/><text x="24.7178%" y="239.50"></text></g><g><title>mvm_madvise_free_plat (897 samples, 0.99%)</title><rect x="24.4834%" y="213" width="0.9945%" height="15" fill="rgb(225,20,46)" fg:x="22084" fg:w="897"/><text x="24.7334%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (940 samples, 1.04%)</title><rect x="24.4501%" y="245" width="1.0421%" height="15" fill="rgb(210,31,41)" fg:x="22054" fg:w="940"/><text x="24.7001%" y="255.50"></text></g><g><title>free_small (13 samples, 0.01%)</title><rect x="25.4778%" y="229" width="0.0144%" height="15" fill="rgb(221,200,47)" fg:x="22981" fg:w="13"/><text x="25.7278%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (103 samples, 0.11%)</title><rect x="25.4978%" y="229" width="0.1142%" height="15" fill="rgb(226,26,5)" fg:x="22999" fg:w="103"/><text x="25.7478%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (1,292 samples, 1.43%)</title><rect x="25.6142%" y="229" width="1.4324%" height="15" fill="rgb(249,33,26)" fg:x="23104" fg:w="1292"/><text x="25.8642%" y="239.50"></text></g><g><title>_platform_memmove (16 samples, 0.02%)</title><rect x="27.0887%" y="165" width="0.0177%" height="15" fill="rgb(235,183,28)" fg:x="24434" fg:w="16"/><text x="27.3387%" y="175.50"></text></g><g><title>nanov2_realloc (30 samples, 0.03%)</title><rect x="27.1075%" y="165" width="0.0333%" height="15" fill="rgb(221,5,38)" fg:x="24451" fg:w="30"/><text x="27.3575%" y="175.50"></text></g><g><title>_platform_memmove (228 samples, 0.25%)</title><rect x="27.1463%" y="149" width="0.2528%" height="15" fill="rgb(247,18,42)" fg:x="24486" fg:w="228"/><text x="27.3963%" y="159.50"></text></g><g><title>medium_try_realloc_in_place (13 samples, 0.01%)</title><rect x="27.4224%" y="149" width="0.0144%" height="15" fill="rgb(241,131,45)" fg:x="24735" fg:w="13"/><text x="27.6724%" y="159.50"></text></g><g><title>small_try_realloc_in_place (19 samples, 0.02%)</title><rect x="27.4368%" y="149" width="0.0211%" height="15" fill="rgb(249,31,29)" fg:x="24748" fg:w="19"/><text x="27.6868%" y="159.50"></text></g><g><title>szone_malloc_should_clear (11 samples, 0.01%)</title><rect x="27.4590%" y="149" width="0.0122%" height="15" fill="rgb(225,111,53)" fg:x="24768" fg:w="11"/><text x="27.7090%" y="159.50"></text></g><g><title>szone_size (14 samples, 0.02%)</title><rect x="27.4712%" y="149" width="0.0155%" height="15" fill="rgb(238,160,17)" fg:x="24779" fg:w="14"/><text x="27.7212%" y="159.50"></text></g><g><title>_malloc_zone_realloc (378 samples, 0.42%)</title><rect x="27.0687%" y="181" width="0.4191%" height="15" fill="rgb(214,148,48)" fg:x="24416" fg:w="378"/><text x="27.3187%" y="191.50"></text></g><g><title>szone_realloc (312 samples, 0.35%)</title><rect x="27.1419%" y="165" width="0.3459%" height="15" fill="rgb(232,36,49)" fg:x="24482" fg:w="312"/><text x="27.3919%" y="175.50"></text></g><g><title>small_size (16 samples, 0.02%)</title><rect x="27.5011%" y="165" width="0.0177%" height="15" fill="rgb(209,103,24)" fg:x="24806" fg:w="16"/><text x="27.7511%" y="175.50"></text></g><g><title>_realloc (420 samples, 0.47%)</title><rect x="27.0576%" y="197" width="0.4656%" height="15" fill="rgb(229,88,8)" fg:x="24406" fg:w="420"/><text x="27.3076%" y="207.50"></text></g><g><title>szone_size (23 samples, 0.03%)</title><rect x="27.4978%" y="181" width="0.0255%" height="15" fill="rgb(213,181,19)" fg:x="24803" fg:w="23"/><text x="27.7478%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (433 samples, 0.48%)</title><rect x="27.0466%" y="229" width="0.4800%" height="15" fill="rgb(254,191,54)" fg:x="24396" fg:w="433"/><text x="27.2966%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (431 samples, 0.48%)</title><rect x="27.0488%" y="213" width="0.4778%" height="15" fill="rgb(241,83,37)" fg:x="24398" fg:w="431"/><text x="27.2988%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,020 samples, 2.24%)</title><rect x="27.5333%" y="229" width="2.2395%" height="15" fill="rgb(233,36,39)" fg:x="24835" fg:w="2020"/><text x="27.7833%" y="239.50">a..</text></g><g><title>core::iter::traits::iterator::Iterator::partition::extend::_{{closure}} (1,471 samples, 1.63%)</title><rect x="29.7761%" y="229" width="1.6308%" height="15" fill="rgb(226,3,54)" fg:x="26858" fg:w="1471"/><text x="30.0261%" y="239.50"></text></g><g><title>core::ptr::write (107 samples, 0.12%)</title><rect x="31.4069%" y="229" width="0.1186%" height="15" fill="rgb(245,192,40)" fg:x="28329" fg:w="107"/><text x="31.6569%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5,441 samples, 6.03%)</title><rect x="25.4956%" y="245" width="6.0322%" height="15" fill="rgb(238,167,29)" fg:x="22997" fg:w="5441"/><text x="25.7456%" y="255.50">alloc::v..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (29 samples, 0.03%)</title><rect x="31.5388%" y="229" width="0.0322%" height="15" fill="rgb(232,182,51)" fg:x="28448" fg:w="29"/><text x="31.7888%" y="239.50"></text></g><g><title>csv_core::reader::Reader::read_record (29 samples, 0.03%)</title><rect x="31.5388%" y="213" width="0.0322%" height="15" fill="rgb(231,60,39)" fg:x="28448" fg:w="29"/><text x="31.7888%" y="223.50"></text></g><g><title>core::str::_&lt;impl str&gt;::parse (26 samples, 0.03%)</title><rect x="31.5854%" y="181" width="0.0288%" height="15" fill="rgb(208,69,12)" fg:x="28490" fg:w="26"/><text x="31.8354%" y="191.50"></text></g><g><title>core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f32&gt;::from_str (26 samples, 0.03%)</title><rect x="31.5854%" y="165" width="0.0288%" height="15" fill="rgb(235,93,37)" fg:x="28490" fg:w="26"/><text x="31.8354%" y="175.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (20 samples, 0.02%)</title><rect x="31.5920%" y="149" width="0.0222%" height="15" fill="rgb(213,116,39)" fg:x="28496" fg:w="20"/><text x="31.8420%" y="159.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::MapAccess&gt;::next_value_seed (36 samples, 0.04%)</title><rect x="31.5754%" y="197" width="0.0399%" height="15" fill="rgb(222,207,29)" fg:x="28481" fg:w="36"/><text x="31.8254%" y="207.50"></text></g><g><title>&lt;spotify_Predictor::data::_::&lt;impl serde::de::Deserialize for spotify_Predictor::data::Track&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_bytes (17 samples, 0.02%)</title><rect x="31.6164%" y="181" width="0.0188%" height="15" fill="rgb(206,96,30)" fg:x="28518" fg:w="17"/><text x="31.8664%" y="191.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_bytes (18 samples, 0.02%)</title><rect x="31.6164%" y="197" width="0.0200%" height="15" fill="rgb(218,138,4)" fg:x="28518" fg:w="18"/><text x="31.8664%" y="207.50"></text></g><g><title>csv::string_record::StringRecord::deserialize (78 samples, 0.09%)</title><rect x="31.5710%" y="229" width="0.0865%" height="15" fill="rgb(250,191,14)" fg:x="28477" fg:w="78"/><text x="31.8210%" y="239.50"></text></g><g><title>spotify_Predictor::data::_::_&lt;impl serde::de::Deserialize for spotify_Predictor::data::Track&gt;::deserialize (75 samples, 0.08%)</title><rect x="31.5743%" y="213" width="0.0831%" height="15" fill="rgb(239,60,40)" fg:x="28480" fg:w="75"/><text x="31.8243%" y="223.50"></text></g><g><title>serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (19 samples, 0.02%)</title><rect x="31.6364%" y="197" width="0.0211%" height="15" fill="rgb(206,27,48)" fg:x="28536" fg:w="19"/><text x="31.8864%" y="207.50"></text></g><g><title>spotify_Predictor::data::load_data (128 samples, 0.14%)</title><rect x="31.5388%" y="245" width="0.1419%" height="15" fill="rgb(225,35,8)" fg:x="28448" fg:w="128"/><text x="31.7888%" y="255.50"></text></g><g><title>std::io::impls::_&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (16 samples, 0.02%)</title><rect x="31.6630%" y="229" width="0.0177%" height="15" fill="rgb(250,213,24)" fg:x="28560" fg:w="16"/><text x="31.9130%" y="239.50"></text></g><g><title>read (16 samples, 0.02%)</title><rect x="31.6630%" y="213" width="0.0177%" height="15" fill="rgb(247,123,22)" fg:x="28560" fg:w="16"/><text x="31.9130%" y="223.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,757 samples, 1.95%)</title><rect x="31.6840%" y="213" width="1.9479%" height="15" fill="rgb(231,138,38)" fg:x="28579" fg:w="1757"/><text x="31.9340%" y="223.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,142 samples, 1.27%)</title><rect x="33.6319%" y="213" width="1.2661%" height="15" fill="rgb(231,145,46)" fg:x="30336" fg:w="1142"/><text x="33.8819%" y="223.50"></text></g><g><title>alloc::vec::set_len_on_drop::SetLenOnDrop::increment_len (17 samples, 0.02%)</title><rect x="34.8991%" y="213" width="0.0188%" height="15" fill="rgb(251,118,11)" fg:x="31479" fg:w="17"/><text x="35.1491%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (494 samples, 0.55%)</title><rect x="34.9180%" y="213" width="0.5477%" height="15" fill="rgb(217,147,25)" fg:x="31496" fg:w="494"/><text x="35.1680%" y="223.50"></text></g><g><title>core::ptr::write (1,305 samples, 1.45%)</title><rect x="35.4656%" y="213" width="1.4468%" height="15" fill="rgb(247,81,37)" fg:x="31990" fg:w="1305"/><text x="35.7156%" y="223.50"></text></g><g><title>spotify_Predictor::decision_tree::find_split::_{{closure}} (24 samples, 0.03%)</title><rect x="36.9180%" y="213" width="0.0266%" height="15" fill="rgb(209,12,38)" fg:x="33300" fg:w="24"/><text x="37.1680%" y="223.50"></text></g><g><title>spotify_Predictor::decision_tree::gini_impurty (12,828 samples, 14.22%)</title><rect x="36.9446%" y="213" width="14.2217%" height="15" fill="rgb(227,1,9)" fg:x="33324" fg:w="12828"/><text x="37.1946%" y="223.50">spotify_Predictor::dec..</text></g><g><title>alloc::alloc::alloc (17,591 samples, 19.50%)</title><rect x="31.6840%" y="229" width="19.5022%" height="15" fill="rgb(248,47,43)" fg:x="28579" fg:w="17591"/><text x="31.9340%" y="239.50">alloc::alloc::alloc</text></g><g><title>szone_malloc_should_clear (18 samples, 0.02%)</title><rect x="51.1663%" y="213" width="0.0200%" height="15" fill="rgb(221,10,30)" fg:x="46152" fg:w="18"/><text x="51.4163%" y="223.50"></text></g><g><title>free_medium (409 samples, 0.45%)</title><rect x="51.1907%" y="213" width="0.4534%" height="15" fill="rgb(210,229,1)" fg:x="46174" fg:w="409"/><text x="51.4407%" y="223.50"></text></g><g><title>mvm_madvise_free_plat (389 samples, 0.43%)</title><rect x="51.2129%" y="197" width="0.4313%" height="15" fill="rgb(222,148,37)" fg:x="46194" fg:w="389"/><text x="51.4629%" y="207.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (389 samples, 0.43%)</title><rect x="51.2129%" y="181" width="0.4313%" height="15" fill="rgb(234,67,33)" fg:x="46194" fg:w="389"/><text x="51.4629%" y="191.50"></text></g><g><title>madvise (389 samples, 0.43%)</title><rect x="51.2129%" y="165" width="0.4313%" height="15" fill="rgb(247,98,35)" fg:x="46194" fg:w="389"/><text x="51.4629%" y="175.50"></text></g><g><title>free_small (16 samples, 0.02%)</title><rect x="51.6441%" y="213" width="0.0177%" height="15" fill="rgb(247,138,52)" fg:x="46583" fg:w="16"/><text x="51.8941%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (432 samples, 0.48%)</title><rect x="51.1863%" y="229" width="0.4789%" height="15" fill="rgb(213,79,30)" fg:x="46170" fg:w="432"/><text x="51.4363%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (85 samples, 0.09%)</title><rect x="51.6652%" y="213" width="0.0942%" height="15" fill="rgb(246,177,23)" fg:x="46602" fg:w="85"/><text x="51.9152%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (1,130 samples, 1.25%)</title><rect x="51.7605%" y="213" width="1.2528%" height="15" fill="rgb(230,62,27)" fg:x="46688" fg:w="1130"/><text x="52.0105%" y="223.50"></text></g><g><title>_nanov2_free (11 samples, 0.01%)</title><rect x="53.0576%" y="133" width="0.0122%" height="15" fill="rgb(216,154,8)" fg:x="47858" fg:w="11"/><text x="53.3076%" y="143.50"></text></g><g><title>nanov2_realloc (30 samples, 0.03%)</title><rect x="53.0565%" y="149" width="0.0333%" height="15" fill="rgb(244,35,45)" fg:x="47857" fg:w="30"/><text x="53.3065%" y="159.50"></text></g><g><title>szone_malloc_should_clear (10 samples, 0.01%)</title><rect x="53.0787%" y="133" width="0.0111%" height="15" fill="rgb(251,115,12)" fg:x="47877" fg:w="10"/><text x="53.3287%" y="143.50"></text></g><g><title>_platform_memmove (246 samples, 0.27%)</title><rect x="53.1020%" y="133" width="0.2727%" height="15" fill="rgb(240,54,50)" fg:x="47898" fg:w="246"/><text x="53.3520%" y="143.50"></text></g><g><title>medium_try_realloc_in_place (11 samples, 0.01%)</title><rect x="53.3814%" y="133" width="0.0122%" height="15" fill="rgb(233,84,52)" fg:x="48150" fg:w="11"/><text x="53.6314%" y="143.50"></text></g><g><title>small_try_realloc_in_place (24 samples, 0.03%)</title><rect x="53.3936%" y="133" width="0.0266%" height="15" fill="rgb(207,117,47)" fg:x="48161" fg:w="24"/><text x="53.6436%" y="143.50"></text></g><g><title>szone_malloc_should_clear (18 samples, 0.02%)</title><rect x="53.4257%" y="133" width="0.0200%" height="15" fill="rgb(249,43,39)" fg:x="48190" fg:w="18"/><text x="53.6757%" y="143.50"></text></g><g><title>small_malloc_should_clear (10 samples, 0.01%)</title><rect x="53.4346%" y="117" width="0.0111%" height="15" fill="rgb(209,38,44)" fg:x="48198" fg:w="10"/><text x="53.6846%" y="127.50"></text></g><g><title>_malloc_zone_realloc (380 samples, 0.42%)</title><rect x="53.0399%" y="165" width="0.4213%" height="15" fill="rgb(236,212,23)" fg:x="47842" fg:w="380"/><text x="53.2899%" y="175.50"></text></g><g><title>szone_realloc (333 samples, 0.37%)</title><rect x="53.0920%" y="149" width="0.3692%" height="15" fill="rgb(242,79,21)" fg:x="47889" fg:w="333"/><text x="53.3420%" y="159.50"></text></g><g><title>szone_size (14 samples, 0.02%)</title><rect x="53.4457%" y="133" width="0.0155%" height="15" fill="rgb(211,96,35)" fg:x="48208" fg:w="14"/><text x="53.6957%" y="143.50"></text></g><g><title>nanov2_size (10 samples, 0.01%)</title><rect x="53.4645%" y="165" width="0.0111%" height="15" fill="rgb(253,215,40)" fg:x="48225" fg:w="10"/><text x="53.7145%" y="175.50"></text></g><g><title>small_size (14 samples, 0.02%)</title><rect x="53.4834%" y="149" width="0.0155%" height="15" fill="rgb(211,81,21)" fg:x="48242" fg:w="14"/><text x="53.7334%" y="159.50"></text></g><g><title>_realloc (433 samples, 0.48%)</title><rect x="53.0277%" y="181" width="0.4800%" height="15" fill="rgb(208,190,38)" fg:x="47831" fg:w="433"/><text x="53.2777%" y="191.50"></text></g><g><title>szone_size (27 samples, 0.03%)</title><rect x="53.4778%" y="165" width="0.0299%" height="15" fill="rgb(235,213,38)" fg:x="48237" fg:w="27"/><text x="53.7278%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (447 samples, 0.50%)</title><rect x="53.0133%" y="213" width="0.4956%" height="15" fill="rgb(237,122,38)" fg:x="47818" fg:w="447"/><text x="53.2633%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (443 samples, 0.49%)</title><rect x="53.0177%" y="197" width="0.4911%" height="15" fill="rgb(244,218,35)" fg:x="47822" fg:w="443"/><text x="53.2677%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,717 samples, 1.90%)</title><rect x="53.5200%" y="213" width="1.9035%" height="15" fill="rgb(240,68,47)" fg:x="48275" fg:w="1717"/><text x="53.7700%" y="223.50">a..</text></g><g><title>core::iter::traits::iterator::Iterator::partition::extend::_{{closure}} (1,234 samples, 1.37%)</title><rect x="55.4279%" y="213" width="1.3681%" height="15" fill="rgb(210,16,53)" fg:x="49996" fg:w="1234"/><text x="55.6779%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,767 samples, 5.28%)</title><rect x="51.6652%" y="229" width="5.2849%" height="15" fill="rgb(235,124,12)" fg:x="46602" fg:w="4767"/><text x="51.9152%" y="239.50">alloc:..</text></g><g><title>core::ptr::write (139 samples, 0.15%)</title><rect x="56.7960%" y="213" width="0.1541%" height="15" fill="rgb(224,169,11)" fg:x="51230" fg:w="139"/><text x="57.0460%" y="223.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (894 samples, 0.99%)</title><rect x="56.9634%" y="197" width="0.9911%" height="15" fill="rgb(250,166,2)" fg:x="51381" fg:w="894"/><text x="57.2134%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (643 samples, 0.71%)</title><rect x="57.9545%" y="197" width="0.7129%" height="15" fill="rgb(242,216,29)" fg:x="52275" fg:w="643"/><text x="58.2045%" y="207.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (266 samples, 0.29%)</title><rect x="58.6796%" y="197" width="0.2949%" height="15" fill="rgb(230,116,27)" fg:x="52929" fg:w="266"/><text x="58.9296%" y="207.50"></text></g><g><title>core::ptr::write (495 samples, 0.55%)</title><rect x="58.9745%" y="197" width="0.5488%" height="15" fill="rgb(228,99,48)" fg:x="53195" fg:w="495"/><text x="59.2245%" y="207.50"></text></g><g><title>spotify_Predictor::decision_tree::find_split::_{{closure}} (11 samples, 0.01%)</title><rect x="59.5244%" y="197" width="0.0122%" height="15" fill="rgb(253,11,6)" fg:x="53691" fg:w="11"/><text x="59.7744%" y="207.50"></text></g><g><title>spotify_Predictor::decision_tree::gini_impurty (6,979 samples, 7.74%)</title><rect x="59.5366%" y="197" width="7.7373%" height="15" fill="rgb(247,143,39)" fg:x="53702" fg:w="6979"/><text x="59.7866%" y="207.50">spotify_Pre..</text></g><g><title>alloc::alloc::alloc (9,318 samples, 10.33%)</title><rect x="56.9623%" y="213" width="10.3304%" height="15" fill="rgb(236,97,10)" fg:x="51380" fg:w="9318"/><text x="57.2123%" y="223.50">alloc::alloc::a..</text></g><g><title>szone_malloc_should_clear (17 samples, 0.02%)</title><rect x="67.2738%" y="197" width="0.0188%" height="15" fill="rgb(233,208,19)" fg:x="60681" fg:w="17"/><text x="67.5238%" y="207.50"></text></g><g><title>free_medium (76 samples, 0.08%)</title><rect x="67.3115%" y="197" width="0.0843%" height="15" fill="rgb(216,164,2)" fg:x="60715" fg:w="76"/><text x="67.5615%" y="207.50"></text></g><g><title>mvm_madvise_free_plat (66 samples, 0.07%)</title><rect x="67.3226%" y="181" width="0.0732%" height="15" fill="rgb(220,129,5)" fg:x="60725" fg:w="66"/><text x="67.5726%" y="191.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (66 samples, 0.07%)</title><rect x="67.3226%" y="165" width="0.0732%" height="15" fill="rgb(242,17,10)" fg:x="60725" fg:w="66"/><text x="67.5726%" y="175.50"></text></g><g><title>madvise (66 samples, 0.07%)</title><rect x="67.3226%" y="149" width="0.0732%" height="15" fill="rgb(242,107,0)" fg:x="60725" fg:w="66"/><text x="67.5726%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (102 samples, 0.11%)</title><rect x="67.2927%" y="213" width="0.1131%" height="15" fill="rgb(251,28,31)" fg:x="60698" fg:w="102"/><text x="67.5427%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (46 samples, 0.05%)</title><rect x="67.4080%" y="197" width="0.0510%" height="15" fill="rgb(233,223,10)" fg:x="60802" fg:w="46"/><text x="67.6580%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (673 samples, 0.75%)</title><rect x="67.4601%" y="197" width="0.7461%" height="15" fill="rgb(215,21,27)" fg:x="60849" fg:w="673"/><text x="67.7101%" y="207.50"></text></g><g><title>nanov2_realloc (21 samples, 0.02%)</title><rect x="68.2395%" y="133" width="0.0233%" height="15" fill="rgb(232,23,21)" fg:x="61552" fg:w="21"/><text x="68.4895%" y="143.50"></text></g><g><title>_platform_memmove (283 samples, 0.31%)</title><rect x="68.2683%" y="117" width="0.3137%" height="15" fill="rgb(244,5,23)" fg:x="61578" fg:w="283"/><text x="68.5183%" y="127.50"></text></g><g><title>free_medium (14 samples, 0.02%)</title><rect x="68.5831%" y="117" width="0.0155%" height="15" fill="rgb(226,81,46)" fg:x="61862" fg:w="14"/><text x="68.8331%" y="127.50"></text></g><g><title>mvm_madvise_free_plat (14 samples, 0.02%)</title><rect x="68.5831%" y="101" width="0.0155%" height="15" fill="rgb(247,70,30)" fg:x="61862" fg:w="14"/><text x="68.8331%" y="111.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (14 samples, 0.02%)</title><rect x="68.5831%" y="85" width="0.0155%" height="15" fill="rgb(212,68,19)" fg:x="61862" fg:w="14"/><text x="68.8331%" y="95.50"></text></g><g><title>madvise (14 samples, 0.02%)</title><rect x="68.5831%" y="69" width="0.0155%" height="15" fill="rgb(240,187,13)" fg:x="61862" fg:w="14"/><text x="68.8331%" y="79.50"></text></g><g><title>small_try_realloc_in_place (14 samples, 0.02%)</title><rect x="68.6153%" y="117" width="0.0155%" height="15" fill="rgb(223,113,26)" fg:x="61891" fg:w="14"/><text x="68.8653%" y="127.50"></text></g><g><title>szone_malloc_should_clear (27 samples, 0.03%)</title><rect x="68.6319%" y="117" width="0.0299%" height="15" fill="rgb(206,192,2)" fg:x="61906" fg:w="27"/><text x="68.8819%" y="127.50"></text></g><g><title>small_malloc_should_clear (11 samples, 0.01%)</title><rect x="68.6497%" y="101" width="0.0122%" height="15" fill="rgb(241,108,4)" fg:x="61922" fg:w="11"/><text x="68.8997%" y="111.50"></text></g><g><title>_malloc_zone_realloc (408 samples, 0.45%)</title><rect x="68.2239%" y="149" width="0.4523%" height="15" fill="rgb(247,173,49)" fg:x="61538" fg:w="408"/><text x="68.4739%" y="159.50"></text></g><g><title>szone_realloc (373 samples, 0.41%)</title><rect x="68.2627%" y="133" width="0.4135%" height="15" fill="rgb(224,114,35)" fg:x="61573" fg:w="373"/><text x="68.5127%" y="143.50"></text></g><g><title>szone_size (13 samples, 0.01%)</title><rect x="68.6619%" y="117" width="0.0144%" height="15" fill="rgb(245,159,27)" fg:x="61933" fg:w="13"/><text x="68.9119%" y="127.50"></text></g><g><title>_realloc (441 samples, 0.49%)</title><rect x="68.2173%" y="165" width="0.4889%" height="15" fill="rgb(245,172,44)" fg:x="61532" fg:w="441"/><text x="68.4673%" y="175.50"></text></g><g><title>szone_size (16 samples, 0.02%)</title><rect x="68.6885%" y="149" width="0.0177%" height="15" fill="rgb(236,23,11)" fg:x="61957" fg:w="16"/><text x="68.9385%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (453 samples, 0.50%)</title><rect x="68.2062%" y="197" width="0.5022%" height="15" fill="rgb(205,117,38)" fg:x="61522" fg:w="453"/><text x="68.4562%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (451 samples, 0.50%)</title><rect x="68.2084%" y="181" width="0.5000%" height="15" fill="rgb(237,72,25)" fg:x="61524" fg:w="451"/><text x="68.4584%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (898 samples, 1.00%)</title><rect x="68.7106%" y="197" width="0.9956%" height="15" fill="rgb(244,70,9)" fg:x="61977" fg:w="898"/><text x="68.9606%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::partition::extend::_{{closure}} (645 samples, 0.72%)</title><rect x="69.7140%" y="197" width="0.7151%" height="15" fill="rgb(217,125,39)" fg:x="62882" fg:w="645"/><text x="69.9640%" y="207.50"></text></g><g><title>core::ptr::write (11 samples, 0.01%)</title><rect x="70.4290%" y="197" width="0.0122%" height="15" fill="rgb(235,36,10)" fg:x="63527" fg:w="11"/><text x="70.6790%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,738 samples, 3.04%)</title><rect x="67.4069%" y="213" width="3.0355%" height="15" fill="rgb(251,123,47)" fg:x="60801" fg:w="2738"/><text x="67.6569%" y="223.50">all..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (814 samples, 0.90%)</title><rect x="70.4545%" y="181" width="0.9024%" height="15" fill="rgb(221,13,13)" fg:x="63550" fg:w="814"/><text x="70.7045%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (635 samples, 0.70%)</title><rect x="71.3570%" y="181" width="0.7040%" height="15" fill="rgb(238,131,9)" fg:x="64364" fg:w="635"/><text x="71.6070%" y="191.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (253 samples, 0.28%)</title><rect x="72.0754%" y="181" width="0.2805%" height="15" fill="rgb(211,50,8)" fg:x="65012" fg:w="253"/><text x="72.3254%" y="191.50"></text></g><g><title>core::ptr::write (502 samples, 0.56%)</title><rect x="72.3559%" y="181" width="0.5565%" height="15" fill="rgb(245,182,24)" fg:x="65265" fg:w="502"/><text x="72.6059%" y="191.50"></text></g><g><title>spotify_Predictor::decision_tree::find_split::_{{closure}} (12 samples, 0.01%)</title><rect x="72.9157%" y="181" width="0.0133%" height="15" fill="rgb(242,14,37)" fg:x="65770" fg:w="12"/><text x="73.1657%" y="191.50"></text></g><g><title>spotify_Predictor::decision_tree::gini_impurty (6,207 samples, 6.88%)</title><rect x="72.9290%" y="181" width="6.8814%" height="15" fill="rgb(246,228,12)" fg:x="65782" fg:w="6207"/><text x="73.1790%" y="191.50">spotify_P..</text></g><g><title>alloc::alloc::alloc (8,457 samples, 9.38%)</title><rect x="70.4545%" y="197" width="9.3758%" height="15" fill="rgb(213,55,15)" fg:x="63550" fg:w="8457"/><text x="70.7045%" y="207.50">alloc::alloc:..</text></g><g><title>szone_malloc_should_clear (18 samples, 0.02%)</title><rect x="79.8104%" y="181" width="0.0200%" height="15" fill="rgb(209,9,3)" fg:x="71989" fg:w="18"/><text x="80.0604%" y="191.50"></text></g><g><title>free_medium (312 samples, 0.35%)</title><rect x="79.8437%" y="181" width="0.3459%" height="15" fill="rgb(230,59,30)" fg:x="72019" fg:w="312"/><text x="80.0937%" y="191.50"></text></g><g><title>mvm_madvise_free_plat (303 samples, 0.34%)</title><rect x="79.8537%" y="165" width="0.3359%" height="15" fill="rgb(209,121,21)" fg:x="72028" fg:w="303"/><text x="80.1037%" y="175.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (303 samples, 0.34%)</title><rect x="79.8537%" y="149" width="0.3359%" height="15" fill="rgb(220,109,13)" fg:x="72028" fg:w="303"/><text x="80.1037%" y="159.50"></text></g><g><title>madvise (303 samples, 0.34%)</title><rect x="79.8537%" y="133" width="0.3359%" height="15" fill="rgb(232,18,1)" fg:x="72028" fg:w="303"/><text x="80.1037%" y="143.50"></text></g><g><title>free_small (26 samples, 0.03%)</title><rect x="80.1896%" y="181" width="0.0288%" height="15" fill="rgb(215,41,42)" fg:x="72331" fg:w="26"/><text x="80.4396%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (353 samples, 0.39%)</title><rect x="79.8304%" y="197" width="0.3914%" height="15" fill="rgb(224,123,36)" fg:x="72007" fg:w="353"/><text x="80.0804%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (35 samples, 0.04%)</title><rect x="80.2239%" y="181" width="0.0388%" height="15" fill="rgb(240,125,3)" fg:x="72362" fg:w="35"/><text x="80.4739%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (526 samples, 0.58%)</title><rect x="80.2661%" y="181" width="0.5831%" height="15" fill="rgb(205,98,50)" fg:x="72400" fg:w="526"/><text x="80.5161%" y="191.50"></text></g><g><title>nanov2_realloc (31 samples, 0.03%)</title><rect x="80.8858%" y="117" width="0.0344%" height="15" fill="rgb(205,185,37)" fg:x="72959" fg:w="31"/><text x="81.1358%" y="127.50"></text></g><g><title>szone_malloc_should_clear (10 samples, 0.01%)</title><rect x="80.9091%" y="101" width="0.0111%" height="15" fill="rgb(238,207,15)" fg:x="72980" fg:w="10"/><text x="81.1591%" y="111.50"></text></g><g><title>_platform_memmove (286 samples, 0.32%)</title><rect x="80.9268%" y="101" width="0.3171%" height="15" fill="rgb(213,199,42)" fg:x="72996" fg:w="286"/><text x="81.1768%" y="111.50"></text></g><g><title>small_try_realloc_in_place (21 samples, 0.02%)</title><rect x="81.2805%" y="101" width="0.0233%" height="15" fill="rgb(235,201,11)" fg:x="73315" fg:w="21"/><text x="81.5305%" y="111.50"></text></g><g><title>szone_malloc_should_clear (16 samples, 0.02%)</title><rect x="81.3104%" y="101" width="0.0177%" height="15" fill="rgb(207,46,11)" fg:x="73342" fg:w="16"/><text x="81.5604%" y="111.50"></text></g><g><title>_malloc_zone_realloc (423 samples, 0.47%)</title><rect x="80.8681%" y="133" width="0.4690%" height="15" fill="rgb(241,35,35)" fg:x="72943" fg:w="423"/><text x="81.1181%" y="143.50"></text></g><g><title>szone_realloc (376 samples, 0.42%)</title><rect x="80.9202%" y="117" width="0.4169%" height="15" fill="rgb(243,32,47)" fg:x="72990" fg:w="376"/><text x="81.1702%" y="127.50"></text></g><g><title>_realloc (461 samples, 0.51%)</title><rect x="80.8570%" y="149" width="0.5111%" height="15" fill="rgb(247,202,23)" fg:x="72933" fg:w="461"/><text x="81.1070%" y="159.50"></text></g><g><title>szone_size (15 samples, 0.02%)</title><rect x="81.3514%" y="133" width="0.0166%" height="15" fill="rgb(219,102,11)" fg:x="73379" fg:w="15"/><text x="81.6014%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (469 samples, 0.52%)</title><rect x="80.8492%" y="181" width="0.5200%" height="15" fill="rgb(243,110,44)" fg:x="72926" fg:w="469"/><text x="81.0992%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (468 samples, 0.52%)</title><rect x="80.8503%" y="165" width="0.5188%" height="15" fill="rgb(222,74,54)" fg:x="72927" fg:w="468"/><text x="81.1003%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (789 samples, 0.87%)</title><rect x="81.3736%" y="181" width="0.8747%" height="15" fill="rgb(216,99,12)" fg:x="73399" fg:w="789"/><text x="81.6236%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::partition::extend::_{{closure}} (554 samples, 0.61%)</title><rect x="82.2561%" y="181" width="0.6142%" height="15" fill="rgb(226,22,26)" fg:x="74195" fg:w="554"/><text x="82.5061%" y="191.50"></text></g><g><title>core::ptr::write (18 samples, 0.02%)</title><rect x="82.8703%" y="181" width="0.0200%" height="15" fill="rgb(217,163,10)" fg:x="74749" fg:w="18"/><text x="83.1203%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,408 samples, 2.67%)</title><rect x="80.2239%" y="197" width="2.6696%" height="15" fill="rgb(213,25,53)" fg:x="72362" fg:w="2408"/><text x="80.4739%" y="207.50">al..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (470 samples, 0.52%)</title><rect x="82.9013%" y="165" width="0.5211%" height="15" fill="rgb(252,105,26)" fg:x="74777" fg:w="470"/><text x="83.1513%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (372 samples, 0.41%)</title><rect x="83.4224%" y="165" width="0.4124%" height="15" fill="rgb(220,39,43)" fg:x="75247" fg:w="372"/><text x="83.6724%" y="175.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (141 samples, 0.16%)</title><rect x="83.8415%" y="165" width="0.1563%" height="15" fill="rgb(229,68,48)" fg:x="75625" fg:w="141"/><text x="84.0915%" y="175.50"></text></g><g><title>core::ptr::write (272 samples, 0.30%)</title><rect x="83.9978%" y="165" width="0.3016%" height="15" fill="rgb(252,8,32)" fg:x="75766" fg:w="272"/><text x="84.2478%" y="175.50"></text></g><g><title>spotify_Predictor::decision_tree::find_split::_{{closure}} (11 samples, 0.01%)</title><rect x="84.3060%" y="165" width="0.0122%" height="15" fill="rgb(223,20,43)" fg:x="76044" fg:w="11"/><text x="84.5560%" y="175.50"></text></g><g><title>spotify_Predictor::decision_tree::gini_impurty (3,650 samples, 4.05%)</title><rect x="84.3182%" y="165" width="4.0466%" height="15" fill="rgb(229,81,49)" fg:x="76055" fg:w="3650"/><text x="84.5682%" y="175.50">spot..</text></g><g><title>alloc::alloc::alloc (4,937 samples, 5.47%)</title><rect x="82.9013%" y="181" width="5.4734%" height="15" fill="rgb(236,28,36)" fg:x="74777" fg:w="4937"/><text x="83.1513%" y="191.50">alloc::..</text></g><g><title>free_medium (204 samples, 0.23%)</title><rect x="88.3858%" y="165" width="0.2262%" height="15" fill="rgb(249,185,26)" fg:x="79724" fg:w="204"/><text x="88.6358%" y="175.50"></text></g><g><title>mvm_madvise_free_plat (199 samples, 0.22%)</title><rect x="88.3914%" y="149" width="0.2206%" height="15" fill="rgb(249,174,33)" fg:x="79729" fg:w="199"/><text x="88.6414%" y="159.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (199 samples, 0.22%)</title><rect x="88.3914%" y="133" width="0.2206%" height="15" fill="rgb(233,201,37)" fg:x="79729" fg:w="199"/><text x="88.6414%" y="143.50"></text></g><g><title>madvise (199 samples, 0.22%)</title><rect x="88.3914%" y="117" width="0.2206%" height="15" fill="rgb(221,78,26)" fg:x="79729" fg:w="199"/><text x="88.6414%" y="127.50"></text></g><g><title>free_small (14 samples, 0.02%)</title><rect x="88.6120%" y="165" width="0.0155%" height="15" fill="rgb(250,127,30)" fg:x="79928" fg:w="14"/><text x="88.8620%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (230 samples, 0.25%)</title><rect x="88.3747%" y="181" width="0.2550%" height="15" fill="rgb(230,49,44)" fg:x="79714" fg:w="230"/><text x="88.6247%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (26 samples, 0.03%)</title><rect x="88.6297%" y="165" width="0.0288%" height="15" fill="rgb(229,67,23)" fg:x="79944" fg:w="26"/><text x="88.8797%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (372 samples, 0.41%)</title><rect x="88.6608%" y="165" width="0.4124%" height="15" fill="rgb(249,83,47)" fg:x="79972" fg:w="372"/><text x="88.9108%" y="175.50"></text></g><g><title>nanov2_realloc (21 samples, 0.02%)</title><rect x="89.1042%" y="101" width="0.0233%" height="15" fill="rgb(215,43,3)" fg:x="80372" fg:w="21"/><text x="89.3542%" y="111.50"></text></g><g><title>_platform_memmove (220 samples, 0.24%)</title><rect x="89.1375%" y="85" width="0.2439%" height="15" fill="rgb(238,154,13)" fg:x="80402" fg:w="220"/><text x="89.3875%" y="95.50"></text></g><g><title>small_try_realloc_in_place (19 samples, 0.02%)</title><rect x="89.4113%" y="85" width="0.0211%" height="15" fill="rgb(219,56,2)" fg:x="80649" fg:w="19"/><text x="89.6613%" y="95.50"></text></g><g><title>szone_malloc_should_clear (16 samples, 0.02%)</title><rect x="89.4324%" y="85" width="0.0177%" height="15" fill="rgb(233,0,4)" fg:x="80668" fg:w="16"/><text x="89.6824%" y="95.50"></text></g><g><title>small_size (10 samples, 0.01%)</title><rect x="89.4512%" y="69" width="0.0111%" height="15" fill="rgb(235,30,7)" fg:x="80685" fg:w="10"/><text x="89.7012%" y="79.50"></text></g><g><title>szone_realloc (303 samples, 0.34%)</title><rect x="89.1275%" y="101" width="0.3359%" height="15" fill="rgb(250,79,13)" fg:x="80393" fg:w="303"/><text x="89.3775%" y="111.50"></text></g><g><title>szone_size (12 samples, 0.01%)</title><rect x="89.4501%" y="85" width="0.0133%" height="15" fill="rgb(211,146,34)" fg:x="80684" fg:w="12"/><text x="89.7001%" y="95.50"></text></g><g><title>_malloc_zone_realloc (340 samples, 0.38%)</title><rect x="89.0887%" y="117" width="0.3769%" height="15" fill="rgb(228,22,38)" fg:x="80358" fg:w="340"/><text x="89.3387%" y="127.50"></text></g><g><title>small_size (11 samples, 0.01%)</title><rect x="89.4767%" y="101" width="0.0122%" height="15" fill="rgb(235,168,5)" fg:x="80708" fg:w="11"/><text x="89.7267%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (386 samples, 0.43%)</title><rect x="89.0732%" y="165" width="0.4279%" height="15" fill="rgb(221,155,16)" fg:x="80344" fg:w="386"/><text x="89.3232%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (386 samples, 0.43%)</title><rect x="89.0732%" y="149" width="0.4279%" height="15" fill="rgb(215,215,53)" fg:x="80344" fg:w="386"/><text x="89.3232%" y="159.50"></text></g><g><title>_realloc (378 samples, 0.42%)</title><rect x="89.0820%" y="133" width="0.4191%" height="15" fill="rgb(223,4,10)" fg:x="80352" fg:w="378"/><text x="89.3320%" y="143.50"></text></g><g><title>szone_size (27 samples, 0.03%)</title><rect x="89.4712%" y="117" width="0.0299%" height="15" fill="rgb(234,103,6)" fg:x="80703" fg:w="27"/><text x="89.7212%" y="127.50"></text></g><g><title>tiny_size (11 samples, 0.01%)</title><rect x="89.4889%" y="101" width="0.0122%" height="15" fill="rgb(227,97,0)" fg:x="80719" fg:w="11"/><text x="89.7389%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (482 samples, 0.53%)</title><rect x="89.5055%" y="165" width="0.5344%" height="15" fill="rgb(234,150,53)" fg:x="80734" fg:w="482"/><text x="89.7555%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::partition::extend::_{{closure}} (368 samples, 0.41%)</title><rect x="90.0421%" y="165" width="0.4080%" height="15" fill="rgb(228,201,54)" fg:x="81218" fg:w="368"/><text x="90.2921%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,643 samples, 1.82%)</title><rect x="88.6297%" y="181" width="1.8215%" height="15" fill="rgb(222,22,37)" fg:x="79944" fg:w="1643"/><text x="88.8797%" y="191.50">a..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (252 samples, 0.28%)</title><rect x="90.4590%" y="149" width="0.2794%" height="15" fill="rgb(237,53,32)" fg:x="81594" fg:w="252"/><text x="90.7090%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (191 samples, 0.21%)</title><rect x="90.7384%" y="149" width="0.2118%" height="15" fill="rgb(233,25,53)" fg:x="81846" fg:w="191"/><text x="90.9884%" y="159.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (83 samples, 0.09%)</title><rect x="90.9568%" y="149" width="0.0920%" height="15" fill="rgb(210,40,34)" fg:x="82043" fg:w="83"/><text x="91.2068%" y="159.50"></text></g><g><title>core::ptr::write (148 samples, 0.16%)</title><rect x="91.0488%" y="149" width="0.1641%" height="15" fill="rgb(241,220,44)" fg:x="82126" fg:w="148"/><text x="91.2988%" y="159.50"></text></g><g><title>spotify_Predictor::decision_tree::gini_impurty (1,982 samples, 2.20%)</title><rect x="91.2217%" y="149" width="2.1973%" height="15" fill="rgb(235,28,35)" fg:x="82282" fg:w="1982"/><text x="91.4717%" y="159.50">s..</text></g><g><title>alloc::alloc::alloc (2,686 samples, 2.98%)</title><rect x="90.4590%" y="165" width="2.9778%" height="15" fill="rgb(210,56,17)" fg:x="81594" fg:w="2686"/><text x="90.7090%" y="175.50">all..</text></g><g><title>szone_malloc_should_clear (16 samples, 0.02%)</title><rect x="93.4191%" y="149" width="0.0177%" height="15" fill="rgb(224,130,29)" fg:x="84264" fg:w="16"/><text x="93.6691%" y="159.50"></text></g><g><title>free_medium (183 samples, 0.20%)</title><rect x="93.4490%" y="149" width="0.2029%" height="15" fill="rgb(235,212,8)" fg:x="84291" fg:w="183"/><text x="93.6990%" y="159.50"></text></g><g><title>mvm_madvise_free_plat (181 samples, 0.20%)</title><rect x="93.4512%" y="133" width="0.2007%" height="15" fill="rgb(223,33,50)" fg:x="84293" fg:w="181"/><text x="93.7012%" y="143.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (181 samples, 0.20%)</title><rect x="93.4512%" y="117" width="0.2007%" height="15" fill="rgb(219,149,13)" fg:x="84293" fg:w="181"/><text x="93.7012%" y="127.50"></text></g><g><title>madvise (181 samples, 0.20%)</title><rect x="93.4512%" y="101" width="0.2007%" height="15" fill="rgb(250,156,29)" fg:x="84293" fg:w="181"/><text x="93.7012%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (209 samples, 0.23%)</title><rect x="93.4368%" y="165" width="0.2317%" height="15" fill="rgb(216,193,19)" fg:x="84280" fg:w="209"/><text x="93.6868%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 0.02%)</title><rect x="93.6685%" y="149" width="0.0188%" height="15" fill="rgb(216,135,14)" fg:x="84489" fg:w="17"/><text x="93.9185%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (190 samples, 0.21%)</title><rect x="93.6896%" y="149" width="0.2106%" height="15" fill="rgb(241,47,5)" fg:x="84508" fg:w="190"/><text x="93.9396%" y="159.50"></text></g><g><title>_nanov2_free (14 samples, 0.02%)</title><rect x="93.9302%" y="69" width="0.0155%" height="15" fill="rgb(233,42,35)" fg:x="84725" fg:w="14"/><text x="94.1802%" y="79.50"></text></g><g><title>nanov2_realloc (29 samples, 0.03%)</title><rect x="93.9279%" y="85" width="0.0322%" height="15" fill="rgb(231,13,6)" fg:x="84723" fg:w="29"/><text x="94.1779%" y="95.50"></text></g><g><title>_platform_memmove (124 samples, 0.14%)</title><rect x="93.9667%" y="69" width="0.1375%" height="15" fill="rgb(207,181,40)" fg:x="84758" fg:w="124"/><text x="94.2167%" y="79.50"></text></g><g><title>small_try_realloc_in_place (19 samples, 0.02%)</title><rect x="94.1231%" y="69" width="0.0211%" height="15" fill="rgb(254,173,49)" fg:x="84899" fg:w="19"/><text x="94.3731%" y="79.50"></text></g><g><title>szone_malloc_should_clear (13 samples, 0.01%)</title><rect x="94.1475%" y="69" width="0.0144%" height="15" fill="rgb(221,1,38)" fg:x="84921" fg:w="13"/><text x="94.3975%" y="79.50"></text></g><g><title>small_malloc_should_clear (10 samples, 0.01%)</title><rect x="94.1508%" y="53" width="0.0111%" height="15" fill="rgb(206,124,46)" fg:x="84924" fg:w="10"/><text x="94.4008%" y="63.50"></text></g><g><title>_malloc_zone_realloc (228 samples, 0.25%)</title><rect x="93.9191%" y="101" width="0.2528%" height="15" fill="rgb(249,21,11)" fg:x="84715" fg:w="228"/><text x="94.1691%" y="111.50"></text></g><g><title>szone_realloc (191 samples, 0.21%)</title><rect x="93.9601%" y="85" width="0.2118%" height="15" fill="rgb(222,201,40)" fg:x="84752" fg:w="191"/><text x="94.2101%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (259 samples, 0.29%)</title><rect x="93.9002%" y="149" width="0.2871%" height="15" fill="rgb(235,61,29)" fg:x="84698" fg:w="259"/><text x="94.1502%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (257 samples, 0.28%)</title><rect x="93.9024%" y="133" width="0.2849%" height="15" fill="rgb(219,207,3)" fg:x="84700" fg:w="257"/><text x="94.1524%" y="143.50"></text></g><g><title>_realloc (250 samples, 0.28%)</title><rect x="93.9102%" y="117" width="0.2772%" height="15" fill="rgb(222,56,46)" fg:x="84707" fg:w="250"/><text x="94.1602%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (242 samples, 0.27%)</title><rect x="94.1951%" y="149" width="0.2683%" height="15" fill="rgb(239,76,54)" fg:x="84964" fg:w="242"/><text x="94.4451%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::partition::extend::_{{closure}} (186 samples, 0.21%)</title><rect x="94.4645%" y="149" width="0.2062%" height="15" fill="rgb(231,124,27)" fg:x="85207" fg:w="186"/><text x="94.7145%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (905 samples, 1.00%)</title><rect x="93.6685%" y="165" width="1.0033%" height="15" fill="rgb(249,195,6)" fg:x="84489" fg:w="905"/><text x="93.9185%" y="175.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (214 samples, 0.24%)</title><rect x="94.6796%" y="133" width="0.2373%" height="15" fill="rgb(237,174,47)" fg:x="85401" fg:w="214"/><text x="94.9296%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (149 samples, 0.17%)</title><rect x="94.9169%" y="133" width="0.1652%" height="15" fill="rgb(206,201,31)" fg:x="85615" fg:w="149"/><text x="95.1669%" y="143.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (62 samples, 0.07%)</title><rect x="95.0876%" y="133" width="0.0687%" height="15" fill="rgb(231,57,52)" fg:x="85769" fg:w="62"/><text x="95.3376%" y="143.50"></text></g><g><title>core::ptr::write (100 samples, 0.11%)</title><rect x="95.1563%" y="133" width="0.1109%" height="15" fill="rgb(248,177,22)" fg:x="85831" fg:w="100"/><text x="95.4063%" y="143.50"></text></g><g><title>spotify_Predictor::decision_tree::gini_impurty (1,526 samples, 1.69%)</title><rect x="95.2805%" y="133" width="1.6918%" height="15" fill="rgb(215,211,37)" fg:x="85943" fg:w="1526"/><text x="95.5305%" y="143.50"></text></g><g><title>small_malloc_should_clear (10 samples, 0.01%)</title><rect x="96.9745%" y="117" width="0.0111%" height="15" fill="rgb(241,128,51)" fg:x="87471" fg:w="10"/><text x="97.2245%" y="127.50"></text></g><g><title>alloc::alloc::alloc (2,083 samples, 2.31%)</title><rect x="94.6796%" y="149" width="2.3093%" height="15" fill="rgb(227,165,31)" fg:x="85401" fg:w="2083"/><text x="94.9296%" y="159.50">a..</text></g><g><title>szone_malloc_should_clear (15 samples, 0.02%)</title><rect x="96.9723%" y="133" width="0.0166%" height="15" fill="rgb(228,167,24)" fg:x="87469" fg:w="15"/><text x="97.2223%" y="143.50"></text></g><g><title>free_small (16 samples, 0.02%)</title><rect x="97.0111%" y="133" width="0.0177%" height="15" fill="rgb(228,143,12)" fg:x="87504" fg:w="16"/><text x="97.2611%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (43 samples, 0.05%)</title><rect x="96.9889%" y="149" width="0.0477%" height="15" fill="rgb(249,149,8)" fg:x="87484" fg:w="43"/><text x="97.2389%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.01%)</title><rect x="97.0366%" y="133" width="0.0122%" height="15" fill="rgb(243,35,44)" fg:x="87527" fg:w="11"/><text x="97.2866%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (147 samples, 0.16%)</title><rect x="97.0499%" y="133" width="0.1630%" height="15" fill="rgb(246,89,9)" fg:x="87539" fg:w="147"/><text x="97.2999%" y="143.50"></text></g><g><title>nanov2_realloc (25 samples, 0.03%)</title><rect x="97.2406%" y="69" width="0.0277%" height="15" fill="rgb(233,213,13)" fg:x="87711" fg:w="25"/><text x="97.4906%" y="79.50"></text></g><g><title>_platform_memmove (145 samples, 0.16%)</title><rect x="97.2727%" y="53" width="0.1608%" height="15" fill="rgb(233,141,41)" fg:x="87740" fg:w="145"/><text x="97.5227%" y="63.50"></text></g><g><title>small_try_realloc_in_place (17 samples, 0.02%)</title><rect x="97.4501%" y="53" width="0.0188%" height="15" fill="rgb(239,167,4)" fg:x="87900" fg:w="17"/><text x="97.7001%" y="63.50"></text></g><g><title>szone_malloc_should_clear (10 samples, 0.01%)</title><rect x="97.4723%" y="53" width="0.0111%" height="15" fill="rgb(209,217,16)" fg:x="87920" fg:w="10"/><text x="97.7223%" y="63.50"></text></g><g><title>_malloc_zone_realloc (237 samples, 0.26%)</title><rect x="97.2317%" y="85" width="0.2627%" height="15" fill="rgb(219,88,35)" fg:x="87703" fg:w="237"/><text x="97.4817%" y="95.50"></text></g><g><title>szone_realloc (202 samples, 0.22%)</title><rect x="97.2705%" y="69" width="0.2239%" height="15" fill="rgb(220,193,23)" fg:x="87738" fg:w="202"/><text x="97.5205%" y="79.50"></text></g><g><title>_realloc (249 samples, 0.28%)</title><rect x="97.2295%" y="101" width="0.2761%" height="15" fill="rgb(230,90,52)" fg:x="87701" fg:w="249"/><text x="97.4795%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (265 samples, 0.29%)</title><rect x="97.2129%" y="133" width="0.2938%" height="15" fill="rgb(252,106,19)" fg:x="87686" fg:w="265"/><text x="97.4629%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (264 samples, 0.29%)</title><rect x="97.2140%" y="117" width="0.2927%" height="15" fill="rgb(206,74,20)" fg:x="87687" fg:w="264"/><text x="97.4640%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (186 samples, 0.21%)</title><rect x="97.5111%" y="133" width="0.2062%" height="15" fill="rgb(230,138,44)" fg:x="87955" fg:w="186"/><text x="97.7611%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (771 samples, 0.85%)</title><rect x="97.0366%" y="149" width="0.8548%" height="15" fill="rgb(235,182,43)" fg:x="87527" fg:w="771"/><text x="97.2866%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::partition::extend::_{{closure}} (149 samples, 0.17%)</title><rect x="97.7262%" y="133" width="0.1652%" height="15" fill="rgb(242,16,51)" fg:x="88149" fg:w="149"/><text x="97.9762%" y="143.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (146 samples, 0.16%)</title><rect x="97.8925%" y="117" width="0.1619%" height="15" fill="rgb(248,9,4)" fg:x="88299" fg:w="146"/><text x="98.1425%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (107 samples, 0.12%)</title><rect x="98.0543%" y="117" width="0.1186%" height="15" fill="rgb(210,31,22)" fg:x="88445" fg:w="107"/><text x="98.3043%" y="127.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (38 samples, 0.04%)</title><rect x="98.1785%" y="117" width="0.0421%" height="15" fill="rgb(239,54,39)" fg:x="88557" fg:w="38"/><text x="98.4285%" y="127.50"></text></g><g><title>core::ptr::write (58 samples, 0.06%)</title><rect x="98.2206%" y="117" width="0.0643%" height="15" fill="rgb(230,99,41)" fg:x="88595" fg:w="58"/><text x="98.4706%" y="127.50"></text></g><g><title>spotify_Predictor::decision_tree::gini_impurty (981 samples, 1.09%)</title><rect x="98.2938%" y="117" width="1.0876%" height="15" fill="rgb(253,106,12)" fg:x="88661" fg:w="981"/><text x="98.5438%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1,349 samples, 1.50%)</title><rect x="97.8925%" y="133" width="1.4956%" height="15" fill="rgb(213,46,41)" fg:x="88299" fg:w="1349"/><text x="98.1425%" y="143.50"></text></g><g><title>free_small (16 samples, 0.02%)</title><rect x="99.4091%" y="117" width="0.0177%" height="15" fill="rgb(215,133,35)" fg:x="89667" fg:w="16"/><text x="99.6591%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (44 samples, 0.05%)</title><rect x="99.3880%" y="133" width="0.0488%" height="15" fill="rgb(213,28,5)" fg:x="89648" fg:w="44"/><text x="99.6380%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (81 samples, 0.09%)</title><rect x="99.4479%" y="117" width="0.0898%" height="15" fill="rgb(215,77,49)" fg:x="89702" fg:w="81"/><text x="99.6979%" y="127.50"></text></g><g><title>_nanov2_free (10 samples, 0.01%)</title><rect x="99.5599%" y="37" width="0.0111%" height="15" fill="rgb(248,100,22)" fg:x="89803" fg:w="10"/><text x="99.8099%" y="47.50"></text></g><g><title>nanov2_realloc (33 samples, 0.04%)</title><rect x="99.5565%" y="53" width="0.0366%" height="15" fill="rgb(208,67,9)" fg:x="89800" fg:w="33"/><text x="99.8065%" y="63.50"></text></g><g><title>_platform_memmove (59 samples, 0.07%)</title><rect x="99.5976%" y="37" width="0.0654%" height="15" fill="rgb(219,133,21)" fg:x="89837" fg:w="59"/><text x="99.8476%" y="47.50"></text></g><g><title>small_try_realloc_in_place (14 samples, 0.02%)</title><rect x="99.6707%" y="37" width="0.0155%" height="15" fill="rgb(246,46,29)" fg:x="89903" fg:w="14"/><text x="99.9207%" y="47.50"></text></g><g><title>szone_malloc_should_clear (13 samples, 0.01%)</title><rect x="99.6863%" y="37" width="0.0144%" height="15" fill="rgb(246,185,52)" fg:x="89917" fg:w="13"/><text x="99.9363%" y="47.50"></text></g><g><title>_malloc_zone_realloc (139 samples, 0.15%)</title><rect x="99.5532%" y="69" width="0.1541%" height="15" fill="rgb(252,136,11)" fg:x="89797" fg:w="139"/><text x="99.8032%" y="79.50"></text></g><g><title>szone_realloc (102 samples, 0.11%)</title><rect x="99.5942%" y="53" width="0.1131%" height="15" fill="rgb(219,138,53)" fg:x="89834" fg:w="102"/><text x="99.8442%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (168 samples, 0.19%)</title><rect x="99.5377%" y="117" width="0.1863%" height="15" fill="rgb(211,51,23)" fg:x="89783" fg:w="168"/><text x="99.7877%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (167 samples, 0.19%)</title><rect x="99.5388%" y="101" width="0.1851%" height="15" fill="rgb(247,221,28)" fg:x="89784" fg:w="167"/><text x="99.7888%" y="111.50"></text></g><g><title>_realloc (160 samples, 0.18%)</title><rect x="99.5466%" y="85" width="0.1774%" height="15" fill="rgb(251,222,45)" fg:x="89791" fg:w="160"/><text x="99.7966%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (10 samples, 0.01%)</title><rect x="99.7239%" y="117" width="0.0111%" height="15" fill="rgb(217,162,53)" fg:x="89951" fg:w="10"/><text x="99.9739%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (141 samples, 0.16%)</title><rect x="99.7395%" y="117" width="0.1563%" height="15" fill="rgb(229,93,14)" fg:x="89965" fg:w="141"/><text x="99.9895%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::partition::extend::_{{closure}} (80 samples, 0.09%)</title><rect x="99.8980%" y="117" width="0.0887%" height="15" fill="rgb(209,67,49)" fg:x="90108" fg:w="80"/><text x="100.1480%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (501 samples, 0.56%)</title><rect x="99.4379%" y="133" width="0.5554%" height="15" fill="rgb(213,87,29)" fg:x="89693" fg:w="501"/><text x="99.6879%" y="143.50"></text></g><g><title>spotify_Predictor::decision_tree::build_tree (15,422 samples, 17.10%)</title><rect x="82.8980%" y="197" width="17.0976%" height="15" fill="rgb(205,151,52)" fg:x="74774" fg:w="15422"/><text x="83.1480%" y="207.50">spotify_Predictor::decisio..</text></g><g><title>spotify_Predictor::decision_tree::build_tree (8,604 samples, 9.54%)</title><rect x="90.4568%" y="181" width="9.5388%" height="15" fill="rgb(253,215,39)" fg:x="81592" fg:w="8604"/><text x="90.7068%" y="191.50">spotify_Predic..</text></g><g><title>spotify_Predictor::decision_tree::build_tree (4,798 samples, 5.32%)</title><rect x="94.6763%" y="165" width="5.3193%" height="15" fill="rgb(221,220,41)" fg:x="85398" fg:w="4798"/><text x="94.9263%" y="175.50">spotify..</text></g><g><title>spotify_Predictor::decision_tree::build_tree (1,898 samples, 2.10%)</title><rect x="97.8914%" y="149" width="2.1042%" height="15" fill="rgb(218,133,21)" fg:x="88298" fg:w="1898"/><text x="98.1414%" y="159.50">s..</text></g><g><title>spotify_Predictor::decision_tree::build_tree (38,824 samples, 43.04%)</title><rect x="56.9545%" y="229" width="43.0421%" height="15" fill="rgb(221,193,43)" fg:x="51373" fg:w="38824"/><text x="57.2045%" y="239.50">spotify_Predictor::decision_tree::build_tree</text></g><g><title>spotify_Predictor::decision_tree::build_tree (26,652 samples, 29.55%)</title><rect x="70.4490%" y="213" width="29.5477%" height="15" fill="rgb(240,128,52)" fg:x="63545" fg:w="26652"/><text x="70.6990%" y="223.50">spotify_Predictor::decision_tree::build_tree</text></g><g><title>std::rt::lang_start::_{{closure}} (90,193 samples, 99.99%)</title><rect x="0.0067%" y="293" width="99.9922%" height="15" fill="rgb(253,114,12)" fg:x="6" fg:w="90193"/><text x="0.2567%" y="303.50">std::rt::lang_start::_{{closure}}</text></g><g><title>core::ops::function::FnOnce::call_once (90,193 samples, 99.99%)</title><rect x="0.0067%" y="277" width="99.9922%" height="15" fill="rgb(215,223,47)" fg:x="6" fg:w="90193"/><text x="0.2567%" y="287.50">core::ops::function::FnOnce::call_once</text></g><g><title>spotify_Predictor::main (90,158 samples, 99.95%)</title><rect x="0.0455%" y="261" width="99.9534%" height="15" fill="rgb(248,225,23)" fg:x="41" fg:w="90158"/><text x="0.2955%" y="271.50">spotify_Predictor::main</text></g><g><title>spotify_Predictor::decision_tree::build_tree (61,623 samples, 68.32%)</title><rect x="31.6807%" y="245" width="68.3182%" height="15" fill="rgb(250,108,0)" fg:x="28576" fg:w="61623"/><text x="31.9307%" y="255.50">spotify_Predictor::decision_tree::build_tree</text></g><g><title>all (90,200 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(228,208,7)" fg:x="0" fg:w="90200"/><text x="0.2500%" y="367.50"></text></g><g><title>start (90,200 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(244,45,10)" fg:x="0" fg:w="90200"/><text x="0.2500%" y="351.50">start</text></g><g><title>main (90,194 samples, 99.99%)</title><rect x="0.0067%" y="325" width="99.9933%" height="15" fill="rgb(207,125,25)" fg:x="6" fg:w="90194"/><text x="0.2567%" y="335.50">main</text></g><g><title>std::rt::lang_start_internal (90,194 samples, 99.99%)</title><rect x="0.0067%" y="309" width="99.9933%" height="15" fill="rgb(210,195,18)" fg:x="6" fg:w="90194"/><text x="0.2567%" y="319.50">std::rt::lang_start_internal</text></g></svg></svg>